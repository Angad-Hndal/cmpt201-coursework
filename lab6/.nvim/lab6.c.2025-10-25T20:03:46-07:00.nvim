#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

/* Simple assert/test with file/line */
#define ASSERT(expr) do { \
  if (!(expr)) { \
    fprintf(stderr, "Assertion failed: %s\nFile: %s Line: %d\n", #expr, __FILE__, __LINE__); \
    exit(1); \
  } \
} while (0)

#define TEST(expr) do { \
  if (!(expr)) { \
    fprintf(stderr, "Test failed: %s\nFile: %s Line: %d\n", #expr, __FILE__, __LINE__); \
    exit(1); \
  } else { \
    printf("Test passed: %s\n", #expr); \
  } \
} while (0)

/* Singly linked list node */
typedef struct node {
  uint64_t data;
  struct node *next;
} node_t;

static node_t *head = NULL;

/* Insert into ascending-sorted list */
void insert_sorted(uint64_t data) {
  node_t *n = (node_t *)malloc(sizeof(*n));
  ASSERT(n != NULL);
  n->data = data;
  n->next = NULL;

  if (head == NULL || data < head->data) {
    n->next = head;
    head = n;
    return;
  }

  node_t *prev = head;
  node_t *curr = head->next;
  while (curr && curr->data < data) {
    prev = curr;
    curr = curr->next;
  }
  n->next = curr;
  prev->next = n;
}

/* Return index of first match, or -1 */
int index_of(uint64_t data) {
  node_t *curr = head;
  int index = 0;
  while (curr) {
    if (curr->data == data) return index;
    curr = curr->next;
    index++;
  }
  return -1;
}

int main(void) {
  insert_sorted(1);
  insert_sorted(2);
  insert_sorted(5);
  insert_sorted(3);

  TEST(index_of(3) == 2);

  insert_sorted(0);
  insert_sorted(4);

  TEST(index_of(4) == 4);
  return 0;
}



#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

/* Simple assert/test with file/line */
#define ASSERT(expr) do { \
  if (!(expr)) { \
    fprintf(stderr, "Assertion failed: %s\nFile: %s Line: %d\n", #expr, __FILE__, __LINE__); \
    exit(1); \
  } \
} while (0)

#define TEST(expr) do { \
  if (!(expr)) { \
    fprintf(stderr, "Test failed: %s\nFile: %s Line: %d\n", #expr, __FILE__, __LINE__); \
    exit(1); \
  } \
} while (0)

/* Singly linked list node + side info */
typedef struct node {
  uint64_t data;
  struct node *next;
} node_t;

typedef struct info {
  uint64_t sum;
} info_t;

static node_t *head = NULL;
static info_t info = {0};

/* Insert into ascending-sorted list and update sum */
void insert_sorted(uint64_t data) {
  node_t *n = (node_t *)malloc(sizeof(*n));
  ASSERT(n != NULL);
  n->data = data;
  n->next = NULL;

  if (head == NULL || data < head->data) {
    n->next = head;
    head = n;
  } else {
    node_t *prev = head;
    node_t *curr = head->next;
    while (curr && curr->data < data) {
      prev = curr;
      curr = curr->next;
    }
    n->next = curr;     /* fix: link to curr, not curr->next */
    prev->next = n;
  }

  info.sum += data;
}

/* Return index of first match, or -1 */
int index_of(uint64_t data) {
  node_t *curr = head;
  int index = 0;
  while (curr) {
    if (curr->data == data) return index;
    curr = curr->next;
    index++;
  }
  return -1;
}

int main(void) {
  insert_sorted(1);
  insert_sorted(3);
  insert_sorted(5);
  insert_sorted(2);

  TEST(info.sum == (uint64_t)(1 + 3 + 5 + 2));
  TEST(index_of(2) == 1);
  return 0;
}

